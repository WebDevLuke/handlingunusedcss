//------------------------------------------------------------------------------------------------
// WIDTHS
//------------------------------------------------------------------------------------------------

$utility-widths-sets: 12 !default;

// WIDTHS MIXIN
//------------------------------------------------------------------------------------------------

@mixin create-widths($width-sets, $breakpoint-suffix: null, $breakpoint-key: null) {

	$breakpoint-label: '';
	@if($breakpoint-suffix) {
		$breakpoint-label: '@#{$breakpoint-key}';
	}

	@for $i from 1 through $width-sets {
		@include filter('u-width-#{$i}\/#{$width-sets}#{$breakpoint-suffix}#{$breakpoint-key}') {
			.u-width-#{$i}\/#{$width-sets}#{$breakpoint-suffix}#{$breakpoint-key} {
				width: ($i / $width-sets) * 100% !important;
				max-width: ($i / $width-sets) * 100% !important;
				flex-basis: ($i / $width-sets) * 100% !important;
				margin-left: 0 !important; /* [1] */
				flex-grow: 1 !important;
			}
		}
	}

	@include filter('u-width-auto#{$breakpoint-suffix}#{$breakpoint-key}') {
		.u-width-auto#{$breakpoint-suffix}#{$breakpoint-key} {
			width: auto !important;
			flex-basis: 0 !important;
			margin-left: 0 !important; /* [1] */
			flex-grow: 1 !important;
			max-width: initial !important;
		}
	}

	@include filter('u-width-grow#{$breakpoint-suffix}#{$breakpoint-key}') {
		.u-width-grow#{$breakpoint-suffix}#{$breakpoint-key} {
			width: auto !important;
			flex-basis: auto !important;
			margin-left: 0 !important; /* [1] */
			flex-grow: 1 !important;
			max-width: initial !important;
		}
	}

	@include filter('u-width-shrink#{$breakpoint-suffix}#{$breakpoint-key}') {
		.u-width-shrink#{$breakpoint-suffix}#{$breakpoint-key} {
			width: auto !important;
			flex-basis: auto !important;
			margin-left: 0 !important; /* [1] */
			flex-grow: 0 !important;
			max-width: initial !important;
		}
	}
}

@include render('widths') {

// GENERATE STANDARD WIDTHS
//------------------------------------------------------------------------------------------------

// Example: .u-width-1/3
@include create-widths($utility-widths-sets);


// GENERATE RESPONSIVE WIDTHS
//------------------------------------------------------------------------------------------------

// Create responsive variants using settings.breakpoints
// Changes width when breakpoint is hit
// Example: .u-width-1/3@md

@each $bp-name, $bp-value in $mq-breakpoints {
	@include mq(#{$bp-name}) {
		@include create-widths($utility-widths-sets, \@, #{$bp-name});
	}
}

// End render
}
